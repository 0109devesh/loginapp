{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../login.service\";\nimport * as i2 from \"@angular/material/button\";\nimport * as i3 from \"@angular/material/form-field\";\nimport * as i4 from \"@angular/material/input\";\nimport * as i5 from \"@angular/forms\";\nimport * as i6 from \"@angular/common\";\nclass LoginComponent {\n  constructor(loginService) {\n    this.loginService = loginService;\n    this.credentials = {\n      email: '',\n      password: ''\n    };\n  }\n  ngOnInit() {}\n  onSubmit() {\n    console.log('form is submitted');\n    console.log(this.credentials);\n    if (this.credentials.email != '' && this.credentials.password != '' && this.credentials.email != null && this.credentials.password != null) {\n      console.log('We have to submit the form to server');\n      // token generate\n      this.loginService.generateToken(this.credentials).subscribe(response => {\n        // success\n        console.log(response.jwt);\n      }, error => {\n        // error\n        console.log(error);\n      });\n    } else {\n      console.log('Fields are empty !!');\n    }\n  }\n}\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.LoginService));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 26,\n  vars: 5,\n  consts: [[1, \"bootstrap-wrapper\"], [1, \"container\", \"mt\"], [1, \"row\"], [1, \"col-md-6\", \"offset-md-3\"], [1, \"container\", \"text-center\"], [\"src\", \"/assets/password lock image.jpg\", \"alt\", \"passwordImage\", 1, \"img-fluid\", 2, \"width\", \"100px\"], [1, \"text-center\"], [3, \"ngSubmit\"], [\"appearance\", \"outline\", 1, \"full-width\"], [\"name\", \"username\", \"type\", \"email\", \"matInput\", \"\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"name\", \"password\", \"type\", \"password\", \"matInput\", \"\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\", \"mat-raised-button\", \"\", \"color\", \"primary\"], [\"type\", \"reset\", \"mat-raised-button\", \"\", \"color\", \"accent\", 2, \"margin-left\", \"10px\"], [1, \"mt\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4);\n      i0.ɵɵelement(5, \"img\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"h1\", 6);\n      i0.ɵɵtext(7, \"Login here !!\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"form\", 7);\n      i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_8_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(9, \"mat-form-field\", 8)(10, \"mat-label\");\n      i0.ɵɵtext(11, \"Email\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"input\", 9);\n      i0.ɵɵlistener(\"ngModelChange\", function LoginComponent_Template_input_ngModelChange_12_listener($event) {\n        return ctx.credentials.email = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(13, \"mat-form-field\", 8)(14, \"mat-label\");\n      i0.ɵɵtext(15, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"input\", 10);\n      i0.ɵɵlistener(\"ngModelChange\", function LoginComponent_Template_input_ngModelChange_16_listener($event) {\n        return ctx.credentials.password = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(17, \"div\", 4)(18, \"button\", 11);\n      i0.ɵɵtext(19, \" Login \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(20, \"button\", 12);\n      i0.ɵɵtext(21, \" Reset \");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelement(22, \"br\");\n      i0.ɵɵelementStart(23, \"p\", 13);\n      i0.ɵɵtext(24);\n      i0.ɵɵpipe(25, \"json\");\n      i0.ɵɵelementEnd()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(12);\n      i0.ɵɵproperty(\"ngModel\", ctx.credentials.email);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.credentials.password);\n      i0.ɵɵadvance(8);\n      i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(25, 3, ctx.credentials), \" \");\n    }\n  },\n  dependencies: [i2.MatButton, i3.MatFormField, i3.MatLabel, i4.MatInput, i5.ɵNgNoValidate, i5.DefaultValueAccessor, i5.NgControlStatus, i5.NgControlStatusGroup, i5.RequiredValidator, i5.NgModel, i5.NgForm, i6.JsonPipe],\n  styles: [\".full-width[_ngcontent-%COMP%]{\\n    width : 100%;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbG9naW4vbG9naW4uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLFlBQVk7QUFDaEIiLCJzb3VyY2VzQ29udGVudCI6WyIuZnVsbC13aWR0aHtcclxuICAgIHdpZHRoIDogMTAwJTtcclxufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});\nexport { LoginComponent };","map":{"version":3,"names":["LoginComponent","constructor","loginService","credentials","email","password","ngOnInit","onSubmit","console","log","generateToken","subscribe","response","jwt","error","i0","ɵɵdirectiveInject","i1","LoginService","selectors","decls","vars","consts","template","LoginComponent_Template","rf","ctx","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵtext","ɵɵlistener","LoginComponent_Template_form_ngSubmit_8_listener","LoginComponent_Template_input_ngModelChange_12_listener","$event","LoginComponent_Template_input_ngModelChange_16_listener","ɵɵadvance","ɵɵproperty","ɵɵtextInterpolate1","ɵɵpipeBind1"],"sources":["E:\\Angular Project File\\loginapp\\src\\app\\login\\login.component.ts","E:\\Angular Project File\\loginapp\\src\\app\\login\\login.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { LoginService } from '../login.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css'],\n})\nexport class LoginComponent implements OnInit {\n  credentials = {\n    email: '',\n    password: '',\n  };\n\n  constructor(private loginService: LoginService) {}\n\n  ngOnInit(): void {}\n\n  onSubmit() {\n    console.log('form is submitted');\n\n    console.log(this.credentials);\n    \n\n    if (\n      this.credentials.email != '' &&\n      this.credentials.password != '' &&\n      this.credentials.email != null &&\n      this.credentials.password != null\n    ) {\n      console.log('We have to submit the form to server');\n\n// token generate\nthis.loginService.generateToken(this.credentials).subscribe(\n  (response:any) => {\n\n    // success\n    console.log(response.jwt);\n    \n  },\n  error => {\n    // error\n    console.log(error);\n  }\n  \n)\n\n\n\n    } else {\n      console.log('Fields are empty !!');\n    }\n  }\n}\n","<div class=\"bootstrap-wrapper\">\n\n    <div class=\"container mt\">\n\n        <div class=\"row\">\n\n            <div class=\"col-md-6 offset-md-3\">\n\n                <div class=\"container text-center\">\n\n                    <img class=\"img-fluid\" style=\"width: 100px;\" src=\"/assets/password lock image.jpg\"\n                        alt=\"passwordImage\">\n\n                </div>\n\n\n                <h1 class=\"text-center\">Login here !!</h1>\n\n\n                <!-- creating form  -->\n\n                <form (ngSubmit)=\"onSubmit()\">\n\n                    <mat-form-field class=\"full-width\" appearance=\"outline\">\n\n                        <mat-label>Email</mat-label>\n\n                        <input [(ngModel)]=\"credentials.email\" name=\"username\" type=\"email\" matInput required />\n\n                    </mat-form-field>\n\n\n                    <mat-form-field class=\"full-width\" appearance=\"outline\">\n\n                        <mat-label>Password</mat-label>\n\n                        <input [(ngModel)]=\"credentials.password\" name=\"password\" type=\"password\" matInput required />\n\n                    </mat-form-field>\n\n\n                    <div class=\"container text-center\">\n\n                        <button type=\"submit\" mat-raised-button color=\"primary\">\n                            Login\n                        </button>\n\n                        <button style=\"margin-left: 10px; \" type=\"reset\" mat-raised-button color=\"accent\">\n                            Reset\n                        </button>\n\n\n\n\n\n\n                    </div>\n\n                </form>\n\n                <br>\n\n                <p class=\"mt\"> {{credentials | json}} </p>\n\n            </div>\n\n\n        </div>\n\n    </div>\n\n</div>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
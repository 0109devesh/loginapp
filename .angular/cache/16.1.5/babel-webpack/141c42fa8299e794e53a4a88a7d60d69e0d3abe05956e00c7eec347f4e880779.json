{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass LoginService {\n  //   /auth/login\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = \"http://localhost:8081\";\n  }\n  // calling the server to generate token\n  generateToken(credentials) {\n    // token generate\n    return this.http.post(`${this.url}/auth/login`, credentials);\n  }\n  // for login user\n  loginUser(token) {\n    localStorage.setItem(\"token\", token);\n    return true;\n  }\n  // to check that is logged in or not\n  isLoggedIn() {\n    let token = localStorage.getItem(\"token\");\n    if (token == undefined || token === '' || token == null) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n  //for logout the user\n  logout() {\n    localStorage.removeItem('token');\n    return true;\n  }\n  //for getting the token\n  getToken() {\n    return localStorage.getItem(\"token\");\n  }\n}\nLoginService.ɵfac = function LoginService_Factory(t) {\n  return new (t || LoginService)(i0.ɵɵinject(i1.HttpClient));\n};\nLoginService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LoginService,\n  factory: LoginService.ɵfac,\n  providedIn: 'root'\n});\nexport { LoginService };","map":{"version":3,"names":["LoginService","constructor","http","baseUrl","generateToken","credentials","post","url","loginUser","token","localStorage","setItem","isLoggedIn","getItem","undefined","logout","removeItem","getToken","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["E:\\Angular Project File\\loginapp\\src\\app\\login.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n\n  baseUrl=\"http://localhost:8081\"\n\n//   /auth/login\n\n  constructor(private http:HttpClient) { }\n\n// calling the server to generate token\n\ngenerateToken(credentials:any){\n\n// token generate\nreturn this.http.post(`${this.url}/auth/login`, credentials)\n\n}\n\n\n\n// for login user\n\nloginUser(token: string){\n\n localStorage.setItem(\"token\", token)\n\nreturn true;\n\n}\n\n// to check that is logged in or not\nisLoggedIn(){\n\nlet token = localStorage.getItem(\"token\");\n\nif(token == undefined || token === '' || token == null){\n  return false ;\n}\nelse{\n  return true;\n}\n\n}\n\n//for logout the user\nlogout(){\n  localStorage.removeItem('token')\n  return true;\n}\n\n//for getting the token\ngetToken(){\n  return localStorage.getItem(\"token\");\n}\n\n\n\n}\n"],"mappings":";;AAGA,MAGaA,YAAY;EAIzB;EAEEC,YAAoBC,IAAe;IAAf,KAAAA,IAAI,GAAJA,IAAI;IAJxB,KAAAC,OAAO,GAAC,uBAAuB;EAIQ;EAEzC;EAEAC,aAAaA,CAACC,WAAe;IAE7B;IACA,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAC,GAAG,IAAI,CAACC,GAAG,aAAa,EAAEF,WAAW,CAAC;EAE5D;EAIA;EAEAG,SAASA,CAACC,KAAa;IAEtBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,KAAK,CAAC;IAErC,OAAO,IAAI;EAEX;EAEA;EACAG,UAAUA,CAAA;IAEV,IAAIH,KAAK,GAAGC,YAAY,CAACG,OAAO,CAAC,OAAO,CAAC;IAEzC,IAAGJ,KAAK,IAAIK,SAAS,IAAIL,KAAK,KAAK,EAAE,IAAIA,KAAK,IAAI,IAAI,EAAC;MACrD,OAAO,KAAK;KACb,MACG;MACF,OAAO,IAAI;;EAGb;EAEA;EACAM,MAAMA,CAAA;IACJL,YAAY,CAACM,UAAU,CAAC,OAAO,CAAC;IAChC,OAAO,IAAI;EACb;EAEA;EACAC,QAAQA,CAAA;IACN,OAAOP,YAAY,CAACG,OAAO,CAAC,OAAO,CAAC;EACtC;;AApDab,YAAY,C;mBAAZA,YAAY,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAZrB,YAAY,C;SAAZA,YAAY;EAAAsB,OAAA,EAAZtB,YAAY,CAAAuB,IAAA;EAAAC,UAAA,EAFX;AAAM;SAEPxB,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}